#!/usr/bin/env python

# The problem: what series of realistic lunar phases could satisfy the
# descriptions of the Moon in the Lord of the Rings?  See moon.html
# for the citations for the constraints below.

observational_datapoints = (
    ('full', 'January 8.7', 'January 9.2'),
    #('new', 'February 15.7', 'February 21.7'), # with text
    ('new', 'February 20.7', 'February 22.7'), # moved one day late
    ('full', 'March 8.0', 'March 8.5'),
    ('new', 'March 12.3', 'March 22.2'),
    )

fullday_datapoints = (
    ('full', 'January 8.0', 'January 9.0'),
    ('new', 'February 22.0', 'February 23.0'), # date of crescent
    ('full', 'March 8.0', 'March 9.0'),
    ('new', 'March 21.0', 'March 22.0'),
    #('new', 'March 22.0', 'March 23.0'),
    )

datapoints = fullday_datapoints

# Reduce the dates given in the datapoints to numbers of days from the
# beginning of the year (with midnight of the first day of the year
# having the value zero).

from shire_calendar import calendar

def to_doy(s):
    if s is None:
        return None
    dayname, fraction = s.split('.')
    return calendar[1419, dayname].day_of_year() - 1 + float('.' + fraction)

constraints = [ (phase, to_doy(start), to_doy(end))
                for (phase, start, end) in datapoints ]

# Make an ordered list of new and full moons over a long period.

import ephem

phaseset = set()

d = ephem.date('1800/1/1')
end = ephem.date('1980/1/1')
while d < end:
    [ phaseset.add((value, name)) for name, value
      in ephem.moon_phases(d).items() ]
    d += 7

phaselist = list(phaseset)
phaselist.sort()

# Start searching through the phases, looking for some that fit.

d = phaselist[2][0] + 1.0               # one day after the third moon phase
d = d - d % 1.0 + (1/24./60./60.)       # round to nearest day
finalend = phaselist[-10][0]            # far from end so we do not run out

from bisect import bisect_left

def get_phases_around(phase, date):
    j = bisect_left(phaselist, (date, None))
    if phaselist[j-1][1] == phase:
        before = phaselist[j-1][0]
    elif phaselist[j-2][1] == phase:
        before = phaselist[j-2][0]
    else:
        print 'cannot find a %s moon around %s' % (phase, date)
    if phaselist[j][1] == phase:
        after = phaselist[j][0]
    elif phaselist[j+1][1] == phase:
        after = phaselist[j+1][0]
    else:
        print 'cannot find a %s moon around %s' % (phase, date)
    return before, after

while d < finalend:
    badness = 0.
    for constraint in constraints:
        phase, startoff, endoff = constraint
        start = d + startoff
        end = d + endoff
        before, after = get_phases_around(phase, end)
        if before < start:            # otherwise add nothing to badness
            badness += min(start - before, after - end)
            if badness > 2.0:           # increase speed
                break
    if badness < 2.0:
        print badness, ephem.date(d)
    d += 0.1
